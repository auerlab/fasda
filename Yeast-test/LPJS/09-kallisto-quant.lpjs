#!/bin/sh -e

##########################################################################
#   Description:
#       Run kallisto quantification for each RNA sample.
#
#   Dependencies:
#       Requires kallisto index.  Run after *-kallisto-index.lpjs.
#
#       All necessary tools are assumed to be in PATH.  If this is not
#       the case, add whatever code is needed here to gain access.
#       (Adding such code to your .bashrc or other startup script is
#       generally a bad idea since it's too complicated to support
#       every program with one environment.)
##########################################################################

#lpjs jobs 18
#lpjs processors-per-job 2
#lpjs threads-per-process processors-per-job
# From lpjs peak-mem:
#lpjs pmem-per-processor 200MiB
##############################################################################
# Update PATH on a chimeric cluster (multiple operating systems used for
# compute nodes)
#
# The PATH used by the package manager that installed LPJS (/usr/local for
# FreeBSD ports, usually /usr/pkg or /*/pkg for pkgsrc), is automatically
# prepended to the default PATH.  This is overridden by "#lpjs path", so
# if we use it, we must add all directories ourselves.
#
# Add the default non-priveleged pkgsrc prefix used by auto-pkgsrc-setup.
#
# Caution: Different versions of rsync behave differently with respect
# to creating path components at the destination.  Newer rsync requires
# --mkpath while older ones included with macOS and RHEL do not support
# this flag. Set path to use pkgsrc rsync in ~/Pkgsrc/pkg or /*/pkg.
#lpjs path ~/Pkgsrc/pkg/bin:/opt/pkg/bin:/usr/pkg/bin:/usr/local/bin:/usr/bin:/bin
#lpjs pull-command rsync --mkpath -r %h:%s/Results/08-kallisto-index Results && rsync --mkpath %h:%s/Results/04-trim/\sample%i-\*.zst Results/04-trim/
#lpjs push-command rsync -r %w/Results/09-kallisto-quant %h:%s/Results

input_dir='Results/04-trim'
output_dir='Results/09-kallisto-quant'
index_dir='Results/08-kallisto-index'

: ${LPJS_ARRAY_INDEX:=1}

# Document software versions used for publication
uname -a
kallisto version
pwd

# kallisto can't handle zstd and will simply seg fault rather than
# issue an error message.  Manually decompress the zstd files into
# a named pipe and let kallisto read from there.
sample=$(printf "%02d" ${LPJS_ARRAY_INDEX})
zst1=$(echo $input_dir/sample${sample}-*.fastq.zst)
pipe1=${zst1%.zst}.fifo
mkfifo $pipe1 $pipe2 || true
zstdcat $zst1 > $pipe1 &

# Kallisto requires an output subdirectory for each sample
stem=$(basename ${zst1%.fastq.zst})
my_output_dir=$output_dir/$stem
mkdir -p $my_output_dir

set -x
kallisto quant \
    --single --fragment-length=190 --sd=10 \
    --threads=$LPJS_THREADS_PER_PROCESS \
    --index=$index_dir/transcriptome.index \
    --output-dir=$my_output_dir $pipe1 2>&1 | tee $log
rm -f $pipe1
